# Copyright (c) 2003, David Leonard. All rights reserved.
# $Id$

#
# This file contains the string constants that are used to
# generate UTF-16 string constants at compile time. See the
# Makefile and string.pl for more details. 
#
# Each line in this file is a string definition of the form
#	name = "some text"
# or, more simply just the 'name' by itself which is shorthand for name="name".
#
# The resulting string constants are accessed using the macro STR(name),
# which is defined in the generated stringdefs.h header file.
#
# NB: If language internationalisation is ever needed, this could
# be the right place to do most of it.
#

#
# general error messages
#
bad_argc = "Wrong number of arguments to function"
bad_arg = "Invalid argument given to function"
internal_error = "Internal error - please report"
new_not_an_object = "Cannot apply 'new' to a non-object"
not_a_constructor = "Cannot apply 'new' to the object"
no_such_function = "No such function"
not_a_function = "Cannot call a non-function"
not_callable = "Object is not callable"
instanceof_not_object = "Expected object to follow 'instanceof'"
in_not_object = "Expected object to follow 'in'"
no_hasinstance = "Object does not support 'instanceof' operator"
bad_lvalue = "Invalid lvalue in assignment"
regex_syntax_error = "Problem parsing regular expression"
recursion_limit_reached = "Call limit reached (Runaway recursion?)"
error

#
# some errors from the string module
#
out_of_memory =	"Out of memory"
no_string_space = "No string space"
bad_utf16_string = "Invalid UTF-16 sequence in string"
unknown_file = "<input>"
string_input_name = "<string>"
duplicate_label = "Duplicate label '"
previous_definition = "previous definition"

#
# more misc error messages
#
toobject_undefined =	"Tried to use undefined as an object"
toobject_null =		"Tried to use null as an object"
toobject_bad =		"Cannot convert the value into an object"
toboolean_bad =		"Cannot convert the value into a boolean"
tonumber_bad =		"Cannot convert the value into a number"
tostring_bad =		"Cannot convert the value into a string"

defaultvalue_string_bad = "Cannot convert the object into a string"
defaultvalue_number_bad = "Cannot convert the object into a number"
defaultvalue_no_bad =     "Cannot convert the object into a default form"
not_array =		  "Expected a native Array object"
array_badlen =		  "A bad length was given to the Array constructor"
not_boolean =		  "Expected a native Boolean object"
not_function =		  "Expected a native Function object"
not_number =		  "Expected a native Number object"
not_regexp =		  "Expected a native RegExp object"
not_string =		  "Expected a native String object"
not_date =		  "Expected a native Date object"

apply_not_array =	"Expected second argument to apply() to be an array"
bad_radix =		"Given radix does not lie between 2 and 36, inclusive"
regexp_bad_string =	"Wrong type of argument given to RegExp constructor"
uri_badhex =		"Could not decode hexadecimal escape sequence in URI"
bad_utf8 =		"Encountered an invalid UTF-8 sequence"
bad_unicode =		"Decoded unicode codepoint too large for UTF-16"
array_sort_error =	"Sort comparison function did not return a number"
toLocaleString_notfunc   = "expected 'toLocaleString' property to be a function"
toLocaleString_notstring = "toLocaleString() property did not return a string"


# The default Function program body
default_function_body = "return undefined;"
implementation_dependent = "ECMA-262 'implementation dependent' result"

#
# some strings used by String and Object methods
#
empty_string = ""
zero_digit = "0"
object_lbracket = "[object "
comma = ","
write
writeval
minus = "-"

#
# strings used by Error
#
name
message
Error
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError

#
# Strings used by functions
#
Activation
Arguments
arguments
callee

#
# names used by RegExp
#
source
global
ignoreCase
multiline
lastIndex
exec
test
index
input

#
# names used by Date
#
parse
UTC
toDateString
toTimeString
toLocaleDateString
toLocaleTimeString
getTime
getFullYear
getUTCFullYear
getMonth
getUTCMonth
getDate
getUTCDate
getDay
getUTCDay
getHours
getUTCHours
getMinutes
getUTCMinutes
getSeconds
getUTCSeconds
getMilliseconds
getUTCMilliseconds
getTimezoneOffset
setTime
setMilliseconds
setUTCMilliseconds
setSeconds
setUTCSeconds
setMinutes
setUTCMinutes
setHours
setUTCHours
setDate
setUTCDate
setMonth
setUTCMonth
setFullYear
setUTCFullYear
toUTCString

#
# names used by Global
#
Global
Object
Function
Array
String
Boolean
Number
Date
RegExp
Math

ObjectConstructor
FunctionConstructor
ErrorConstructor
ArrayConstructor
StringConstructor
BooleanConstructor
NumberConstructor
DateConstructor
RegExpConstructor

#
# constants and methods names of built-in objects
#
Infinity
NaN
apply
call
charAt
charCodeAt
concat
constructor
decodeURI
decodeURIComponent
encodeURI
encodeURIComponent
eval
fromCharCode
hasOwnProperty
indexOf
isFinite
isNaN
isPrototypeOf
join
lastIndexOf
length
localeCompare
match
parseFloat
parseInt
pop
propertyIsEnumerable
prototype
push
replace
reverse
search
shift
slice
sort
splice
split
substring
toLocaleLowerCase
toLocaleString
toLocaleUpperCase
toLowerCase
toString
toUpperCase
undefined
unshift
valueOf

# Global.Number strings
MAX_VALUE
MIN_VALUE
NEGATIVE_INFINITY
POSITIVE_INFINITY
toFixed
toExponential
toPrecision

# Global.Math strings
E
LN10
LN2
LOG2E
LOG10E
PI
SQRT1_2
SQRT2
abs
acos
asin
atan
atan2
ceil
cos
exp
floor
log
max
min
pow
random
round
sin
sqrt
tan

#
# backward-compatibility strings
#
escape
unescape
substr
getYear
setYear
toGMTString

#
# some strings returned by 'typeof(x)'
#
object
string
number
unknown

#
# Lexer errors
#
unexpected_eof = "Unexpected end of file"
broken_literal = "Missing ending quote of string literal"
escaped_lit_nl = "Missing ending quote of string literal"
invalid_esc_x =	 "Invalid \\x escape"
invalid_esc_u =	 "Invalid \\u escape"
hex_literal_detritus = "Unexpected characters after hexadecimal literal"
oct_literal_detritus = "Unexpected characters after octal literal"
dec_literal_detritus = "Unexpected characters after decimal literal"
number_too_long = "Number is too long"
eof_in_c_comment = "Multiline comment is missing its closing '*/'"
eof_in_regex = "Missing closing '/' of regular expression"
broken_regex = "Missing closing '/' of regular expression"

#
# Parser errors
# 
parse_error = "Parse error"
unexpected_token = "Unexpected token"

#
# lexer tokens
#
synchronized
eleven_filler = "..........."
implements
instanceof
transient
protected
interface
volatile
debugger
function
continue
abstract
private
package
extends
boolean
finally
default
native
export
typeof
switch
return
throws
import
static
delete
public
double
float
super
short
const
class
while
final
throw
catch
break
with
long
void
else
goto
enum
this
byte
case
char
new
try
int
for
var
in
do
if

#
# more tokens (literals)
#
null
true
false

#
# compatibility strings
#
__proto__
__parent__

#
# cfunction strings
#
cfunction_body1 = "function "
cfunction_body2 = "() { /* built-in "
cfunction_body3 = " */ }"

